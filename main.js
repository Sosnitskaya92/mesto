(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=n,this._handleCardClick=r}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_addlike",value:function(e){e.target.classList.toggle("element__heart_active")}},{key:"_deleteElement",value:function(){this._element.remove(),this._element=null}},{key:"_setEventListners",value:function(){var e=this;this._element.querySelector(".element__heart").addEventListener("click",(function(t){return e._addlike(t)})),this._element.querySelector(".element__delete").addEventListener("click",(function(){return e._deleteElement()})),this._element.querySelector(".element__image").addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)}))}},{key:"generateCard",value:function(){this._element=this._getTemplate(),this._setEventListners();var e=this._element.querySelector(".element__image");return this._element.querySelector(".element__title").textContent=this._name,e.src=this._link,e.alt=this._name,this._element}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._initialArray=r,this._renderer=o,this._container=document.querySelector(n)}var t,r;return t=e,(r=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;this._initialArray.forEach((function(t){e._renderer(t)}))}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._validationConfig=t,this._elementForm=n,this._submitButton=this._elementForm.querySelector(this._validationConfig.submitButtonSelector),this._inputList=Array.from(this._elementForm.querySelectorAll(this._validationConfig.inputSelector))}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._elementForm.querySelector(".".concat(e.id,"-error"));e.classList.add(this._validationConfig.inputErrorClass),n.textContent=t,n.classList.add(this._validationConfig.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._elementForm.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._validationConfig.inputErrorClass),t.classList.remove(this._validationConfig.errorClass),t.textContent=""}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"toogleButtonState",value:function(){this._hasInvalidInput()?(this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._validationConfig.inactiveButtonClass)):(this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._validationConfig.inactiveButtonClass))}},{key:"_setEventListener",value:function(){var e=this;this.toogleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e.toogleButtonState()}))}))}},{key:"enableValidation",value:function(){this._setEventListener()}},{key:"resetErrorValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.closePopup()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"openPopup",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"closePopup",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&e.closePopup()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(){return l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=f(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},l.apply(this,arguments)}function f(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}function p(e,t){return p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},p(e,t)}function h(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&p(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=d(r);if(o){var n=d(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._submitFormFunction=t,n._form=n._popup.querySelector(".popup__form"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this._form.querySelectorAll(".popup__input"),t={};return e.forEach((function(e){return t[e.name]=e.value})),t}},{key:"setEventListeners",value:function(){var e=this;l(d(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitFormFunction(e._getInputValues()),e.closePopup()}))}},{key:"closePopup",value:function(){this._form.reset(),l(d(a.prototype),"closePopup",this).call(this)}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(u);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function m(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=P(e)););return e}function P(e){return P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},P(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(i,e);var t,n,r,o=(n=i,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=P(n);if(r){var o=P(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return m(this,e)});function i(e){var t,n,r,a,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),u=function(e,r){n._imagePopupPicture=n._popup.querySelector(".popup__image"),n._subtitlePopup=n._popup.querySelector(".popup__subtitle"),n._imagePopupPicture.src=e,n._imagePopupPicture.alt=r,n._subtitlePopup.textContent=r,g((t=b(n),P(i.prototype)),"openPopup",t).call(t)},(a="openPopupImage")in(r=b(n=o.call(this,e)))?Object.defineProperty(r,a,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[a]=u,n}return t=i,Object.defineProperty(t,"prototype",{writable:!1}),t}(u);function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var j=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._job=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,job:this._job.textContent}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._job.textContent=e.about}},{key:"setAvatar",value:function(e){this._avatar.src=e.avatar}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return fetch(this._baseUrl,{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"getInitialCards",value:function(){return fetch(this._baseUrl,{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"editUserInfo",value:function(e){return fetch(this._baseUrl,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"addCard",value:function(e){return fetch(this._baseUrl,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"putCardLike",value:function(e){return fetch("".concat(this._baseUrl,"/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteCardLike",value:function(e){return fetch("".concat(this._baseUrl,"/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"editAvatar",value:function(e){return fetch(this._baseUrl,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),O={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},L=document.querySelector(".profile__edit"),I=document.querySelector(".profile__add"),q=document.querySelector(".profile__avatar_edit"),T=document.querySelector(".popup__input_type_name"),U=document.querySelector(".popup__input_type_info"),B=document.querySelector(".popup_edit"),R=document.querySelector(".popup_add"),x=document.querySelector(".elements"),A=(document.querySelector(".element__delete"),new j(".profile__title",".profile__text",".profile__avatar")),V=new i(O,B);V.enableValidation();var F=new i(O,R);F.enableValidation();var D=new k(".popup_open");function N(e,t){D.openPopupImage(e,t)}function z(e){return new t(e,".element__template",N).generateCard()}function J(e){A.setUserInfo(e)}D.setEventListeners();var G=new y(".popup_edit",(function(e){M.editUserInfo(e).then((function(e){J(e)})).finally((function(){G.closePopup()}))}));L.addEventListener("click",(function(){A.getUserInfo(),T.value=A.getUserInfo().name,U.value=A.getUserInfo().job,G.openPopup(),V.resetErrorValidation()})),G.setEventListeners();var H=new y(".popup_add",(function(e){K.addCard(e).then((function(e){x.prepend(z(e))})).finally((function(){H.closePopup()}))}));I.addEventListener("click",(function(){H.openPopup(),F.toogleButtonState(),F.resetErrorValidation()})),H.setEventListeners();var M=new C({baseUrl:"https://mesto.nomoreparties.co/v1/cohort36/users/me",headers:{authorization:"9bb3333e-8dc8-44bf-a219-29f503167caa","Content-Type":"application/json"}});M.getUserInfo().then((function(e){J(e)}));var K=new C({baseUrl:"https://mesto.nomoreparties.co/v1/cohort36/cards",headers:{authorization:"9bb3333e-8dc8-44bf-a219-29f503167caa","Content-Type":"application/json"}});K.getInitialCards().then((function(e){var t=new r({items:e,renderer:function(e){t.addItem(z(e))}},".elements");t.renderItems()}));var Q=new C({baseUrl:"https://mesto.nomoreparties.co/v1/cohort36/users/me/avatar",headers:{authorization:"9bb3333e-8dc8-44bf-a219-29f503167caa","Content-Type":"application/json"}});M.getUserInfo().then((function(e){X(e)}));var W=new y(".popup_edit-avatar",(function(e){!function(e){Q.editAvatar(e).then((function(e){X(e)})).finally((function(){W.closePopup()}))}(e)}));function X(e){A.setAvatar(e)}W.setEventListeners(),q.addEventListener("click",(function(){W.openPopup()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,